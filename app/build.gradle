plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.emfad.app'
    compileSdk 34

    defaultConfig {
        applicationId "com.emfad.app"
        minSdk 24
        targetSdk 34
        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            // Default debug keystore - always available
        }
        release {
            // Only configure signing if all required environment variables are present
            if (hasSigningConfig()) {
                storeFile file(System.getenv("CM_KEYSTORE_PATH"))
                storePassword System.getenv("CM_KEYSTORE_PASSWORD")
                keyAlias System.getenv("CM_KEY_ALIAS")
                keyPassword System.getenv("CM_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            if (hasSigningConfig()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    // Test options for CI
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled = true
    }

    // Lint options
    lint {
        abortOnError false
        xmlReport true
        htmlReport true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    
    // Jetpack Compose BOM - this manages all compose versions
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    
    // Navigation Compose - REQUIRED for your MainActivity
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // ViewModel Compose
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    
    // Optional but recommended
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Helper function to check if signing config is available
def hasSigningConfig() {
    return System.getenv("CM_KEYSTORE_PATH") && 
           System.getenv("CM_KEYSTORE_PASSWORD") && 
           System.getenv("CM_KEY_ALIAS") && 
           System.getenv("CM_KEY_PASSWORD")
}

// Version Code/Name for CI
def getVersionCode() {
    def buildId = System.getenv("CM_BUILD_ID")
    if (buildId != null && buildId.isInteger()) {
        return buildId as Integer
    }
    return 1
}

def getVersionName() {
    def tag = System.getenv("CM_TAG")
    if (tag != null && !tag.isEmpty()) {
        return tag
    }
    return "1.0.0-SNAPSHOT"
}
